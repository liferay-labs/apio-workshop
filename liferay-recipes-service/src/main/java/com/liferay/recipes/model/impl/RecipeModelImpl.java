/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.recipes.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.recipes.model.Recipe;
import com.liferay.recipes.model.RecipeModel;
import com.liferay.recipes.model.RecipeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Recipe service. Represents a row in the &quot;APIO_Recipe&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link RecipeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RecipeImpl}.
 * </p>
 *
 * @author Alejandro Hern√°ndez
 * @see RecipeImpl
 * @see Recipe
 * @see RecipeModel
 * @generated
 */
@ProviderType
public class RecipeModelImpl extends BaseModelImpl<Recipe>
	implements RecipeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a recipe model instance should use the {@link Recipe} interface instead.
	 */
	public static final String TABLE_NAME = "APIO_Recipe";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "recipeId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "region", Types.VARCHAR },
			{ "imageFileEntryId", Types.BIGINT },
			{ "publishedDate", Types.TIMESTAMP },
			{ "hoursToMake", Types.INTEGER },
			{ "minutesToMake", Types.INTEGER },
			{ "stepsString", Types.CLOB },
			{ "ingredientsString", Types.CLOB },
			{ "videoURL", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("recipeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("region", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("imageFileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("publishedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("hoursToMake", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("minutesToMake", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("stepsString", Types.CLOB);
		TABLE_COLUMNS_MAP.put("ingredientsString", Types.CLOB);
		TABLE_COLUMNS_MAP.put("videoURL", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table APIO_Recipe (uuid_ VARCHAR(75) null,recipeId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,name VARCHAR(255) null,region VARCHAR(255) null,imageFileEntryId LONG,publishedDate DATE null,hoursToMake INTEGER,minutesToMake INTEGER,stepsString TEXT null,ingredientsString TEXT null,videoURL VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table APIO_Recipe";
	public static final String ORDER_BY_JPQL = " ORDER BY recipe.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY APIO_Recipe.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.recipes.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.recipes.model.Recipe"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.recipes.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.recipes.model.Recipe"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.recipes.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.recipes.model.Recipe"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Recipe toModel(RecipeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Recipe model = new RecipeImpl();

		model.setUuid(soapModel.getUuid());
		model.setRecipeId(soapModel.getRecipeId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setName(soapModel.getName());
		model.setRegion(soapModel.getRegion());
		model.setImageFileEntryId(soapModel.getImageFileEntryId());
		model.setPublishedDate(soapModel.getPublishedDate());
		model.setHoursToMake(soapModel.getHoursToMake());
		model.setMinutesToMake(soapModel.getMinutesToMake());
		model.setStepsString(soapModel.getStepsString());
		model.setIngredientsString(soapModel.getIngredientsString());
		model.setVideoURL(soapModel.getVideoURL());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Recipe> toModels(RecipeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Recipe> models = new ArrayList<Recipe>(soapModels.length);

		for (RecipeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.recipes.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.recipes.model.Recipe"));

	public RecipeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _recipeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRecipeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _recipeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Recipe.class;
	}

	@Override
	public String getModelClassName() {
		return Recipe.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("recipeId", getRecipeId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("region", getRegion());
		attributes.put("imageFileEntryId", getImageFileEntryId());
		attributes.put("publishedDate", getPublishedDate());
		attributes.put("hoursToMake", getHoursToMake());
		attributes.put("minutesToMake", getMinutesToMake());
		attributes.put("stepsString", getStepsString());
		attributes.put("ingredientsString", getIngredientsString());
		attributes.put("videoURL", getVideoURL());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long recipeId = (Long)attributes.get("recipeId");

		if (recipeId != null) {
			setRecipeId(recipeId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String region = (String)attributes.get("region");

		if (region != null) {
			setRegion(region);
		}

		Long imageFileEntryId = (Long)attributes.get("imageFileEntryId");

		if (imageFileEntryId != null) {
			setImageFileEntryId(imageFileEntryId);
		}

		Date publishedDate = (Date)attributes.get("publishedDate");

		if (publishedDate != null) {
			setPublishedDate(publishedDate);
		}

		Integer hoursToMake = (Integer)attributes.get("hoursToMake");

		if (hoursToMake != null) {
			setHoursToMake(hoursToMake);
		}

		Integer minutesToMake = (Integer)attributes.get("minutesToMake");

		if (minutesToMake != null) {
			setMinutesToMake(minutesToMake);
		}

		String stepsString = (String)attributes.get("stepsString");

		if (stepsString != null) {
			setStepsString(stepsString);
		}

		String ingredientsString = (String)attributes.get("ingredientsString");

		if (ingredientsString != null) {
			setIngredientsString(ingredientsString);
		}

		String videoURL = (String)attributes.get("videoURL");

		if (videoURL != null) {
			setVideoURL(videoURL);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getRecipeId() {
		return _recipeId;
	}

	@Override
	public void setRecipeId(long recipeId) {
		_recipeId = recipeId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getRegion() {
		if (_region == null) {
			return "";
		}
		else {
			return _region;
		}
	}

	@Override
	public void setRegion(String region) {
		_region = region;
	}

	@Override
	public long getImageFileEntryId() {
		return _imageFileEntryId;
	}

	@Override
	public void setImageFileEntryId(long imageFileEntryId) {
		_imageFileEntryId = imageFileEntryId;
	}

	@Override
	public Date getPublishedDate() {
		return _publishedDate;
	}

	@Override
	public void setPublishedDate(Date publishedDate) {
		_publishedDate = publishedDate;
	}

	@Override
	public int getHoursToMake() {
		return _hoursToMake;
	}

	@Override
	public void setHoursToMake(int hoursToMake) {
		_hoursToMake = hoursToMake;
	}

	@Override
	public int getMinutesToMake() {
		return _minutesToMake;
	}

	@Override
	public void setMinutesToMake(int minutesToMake) {
		_minutesToMake = minutesToMake;
	}

	@Override
	public String getStepsString() {
		if (_stepsString == null) {
			return "";
		}
		else {
			return _stepsString;
		}
	}

	@Override
	public void setStepsString(String stepsString) {
		_stepsString = stepsString;
	}

	@Override
	public String getIngredientsString() {
		if (_ingredientsString == null) {
			return "";
		}
		else {
			return _ingredientsString;
		}
	}

	@Override
	public void setIngredientsString(String ingredientsString) {
		_ingredientsString = ingredientsString;
	}

	@Override
	public String getVideoURL() {
		if (_videoURL == null) {
			return "";
		}
		else {
			return _videoURL;
		}
	}

	@Override
	public void setVideoURL(String videoURL) {
		_videoURL = videoURL;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Recipe.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Recipe.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Recipe toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Recipe)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RecipeImpl recipeImpl = new RecipeImpl();

		recipeImpl.setUuid(getUuid());
		recipeImpl.setRecipeId(getRecipeId());
		recipeImpl.setCompanyId(getCompanyId());
		recipeImpl.setGroupId(getGroupId());
		recipeImpl.setUserId(getUserId());
		recipeImpl.setUserName(getUserName());
		recipeImpl.setCreateDate(getCreateDate());
		recipeImpl.setModifiedDate(getModifiedDate());
		recipeImpl.setName(getName());
		recipeImpl.setRegion(getRegion());
		recipeImpl.setImageFileEntryId(getImageFileEntryId());
		recipeImpl.setPublishedDate(getPublishedDate());
		recipeImpl.setHoursToMake(getHoursToMake());
		recipeImpl.setMinutesToMake(getMinutesToMake());
		recipeImpl.setStepsString(getStepsString());
		recipeImpl.setIngredientsString(getIngredientsString());
		recipeImpl.setVideoURL(getVideoURL());

		recipeImpl.resetOriginalValues();

		return recipeImpl;
	}

	@Override
	public int compareTo(Recipe recipe) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), recipe.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Recipe)) {
			return false;
		}

		Recipe recipe = (Recipe)obj;

		long primaryKey = recipe.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		RecipeModelImpl recipeModelImpl = this;

		recipeModelImpl._originalUuid = recipeModelImpl._uuid;

		recipeModelImpl._originalCompanyId = recipeModelImpl._companyId;

		recipeModelImpl._setOriginalCompanyId = false;

		recipeModelImpl._originalGroupId = recipeModelImpl._groupId;

		recipeModelImpl._setOriginalGroupId = false;

		recipeModelImpl._setModifiedDate = false;

		recipeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Recipe> toCacheModel() {
		RecipeCacheModel recipeCacheModel = new RecipeCacheModel();

		recipeCacheModel.uuid = getUuid();

		String uuid = recipeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			recipeCacheModel.uuid = null;
		}

		recipeCacheModel.recipeId = getRecipeId();

		recipeCacheModel.companyId = getCompanyId();

		recipeCacheModel.groupId = getGroupId();

		recipeCacheModel.userId = getUserId();

		recipeCacheModel.userName = getUserName();

		String userName = recipeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			recipeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			recipeCacheModel.createDate = createDate.getTime();
		}
		else {
			recipeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			recipeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			recipeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		recipeCacheModel.name = getName();

		String name = recipeCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			recipeCacheModel.name = null;
		}

		recipeCacheModel.region = getRegion();

		String region = recipeCacheModel.region;

		if ((region != null) && (region.length() == 0)) {
			recipeCacheModel.region = null;
		}

		recipeCacheModel.imageFileEntryId = getImageFileEntryId();

		Date publishedDate = getPublishedDate();

		if (publishedDate != null) {
			recipeCacheModel.publishedDate = publishedDate.getTime();
		}
		else {
			recipeCacheModel.publishedDate = Long.MIN_VALUE;
		}

		recipeCacheModel.hoursToMake = getHoursToMake();

		recipeCacheModel.minutesToMake = getMinutesToMake();

		recipeCacheModel.stepsString = getStepsString();

		String stepsString = recipeCacheModel.stepsString;

		if ((stepsString != null) && (stepsString.length() == 0)) {
			recipeCacheModel.stepsString = null;
		}

		recipeCacheModel.ingredientsString = getIngredientsString();

		String ingredientsString = recipeCacheModel.ingredientsString;

		if ((ingredientsString != null) && (ingredientsString.length() == 0)) {
			recipeCacheModel.ingredientsString = null;
		}

		recipeCacheModel.videoURL = getVideoURL();

		String videoURL = recipeCacheModel.videoURL;

		if ((videoURL != null) && (videoURL.length() == 0)) {
			recipeCacheModel.videoURL = null;
		}

		return recipeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", recipeId=");
		sb.append(getRecipeId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", region=");
		sb.append(getRegion());
		sb.append(", imageFileEntryId=");
		sb.append(getImageFileEntryId());
		sb.append(", publishedDate=");
		sb.append(getPublishedDate());
		sb.append(", hoursToMake=");
		sb.append(getHoursToMake());
		sb.append(", minutesToMake=");
		sb.append(getMinutesToMake());
		sb.append(", stepsString=");
		sb.append(getStepsString());
		sb.append(", ingredientsString=");
		sb.append(getIngredientsString());
		sb.append(", videoURL=");
		sb.append(getVideoURL());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.liferay.recipes.model.Recipe");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>recipeId</column-name><column-value><![CDATA[");
		sb.append(getRecipeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>region</column-name><column-value><![CDATA[");
		sb.append(getRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>imageFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getImageFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publishedDate</column-name><column-value><![CDATA[");
		sb.append(getPublishedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hoursToMake</column-name><column-value><![CDATA[");
		sb.append(getHoursToMake());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>minutesToMake</column-name><column-value><![CDATA[");
		sb.append(getMinutesToMake());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stepsString</column-name><column-value><![CDATA[");
		sb.append(getStepsString());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ingredientsString</column-name><column-value><![CDATA[");
		sb.append(getIngredientsString());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>videoURL</column-name><column-value><![CDATA[");
		sb.append(getVideoURL());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Recipe.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Recipe.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _recipeId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _name;
	private String _region;
	private long _imageFileEntryId;
	private Date _publishedDate;
	private int _hoursToMake;
	private int _minutesToMake;
	private String _stepsString;
	private String _ingredientsString;
	private String _videoURL;
	private long _columnBitmask;
	private Recipe _escapedModel;
}